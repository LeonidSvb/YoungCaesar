const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–æ–≤
const dataPath = path.join(__dirname, '..', 'data', 'raw', 'vapi_filtered_calls_2025-09-17T09-23-36-349.json');
const rawData = fs.readFileSync(dataPath, 'utf8');
const calls = JSON.parse(rawData);

console.log(`–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ ${calls.length} –∑–≤–æ–Ω–∫–æ–≤...`);

// –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è —Ñ—Ä–∞–∑
const agentPhrases = {
  VALUE: new Map(), // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É—Å–ª—É–≥ –∏ –≤—ã–≥–æ–¥
  CTA: new Map(),   // –ü—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é
  BRAND: new Map(), // –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
  STOP: new Map(),  // –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è
  APOLOGY: new Map(), // –ò–∑–≤–∏–Ω–µ–Ω–∏—è –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
  WAIT: new Map(),  // –ü—Ä–æ—Å—å–±—ã –ø–æ–¥–æ–∂–¥–∞—Ç—å
  OTHER: new Map()  // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
};

const userPhrases = {
  OBJECTIONS: new Map(), // –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
  REFUSAL: new Map(),    // –°–ø–æ—Å–æ–±—ã –æ—Ç–∫–∞–∑–∞
  OTHER: new Map()       // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
};

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞
const categoryKeywords = {
  VALUE: [
    '–ø–æ–º–æ–≥–∞–µ–º', '–ø–æ–º–æ–∂–µ–º', '—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è', '—É—Å–ª—É–≥–∏', '–∫–ª–∏–µ–Ω—Ç–æ–≤', '–∑–∞–∫–∞–∑—á–∏–∫–æ–≤',
    'acquisition', 'customers', 'manufacturers', 'trade shows', 'referrals',
    'acquire', 'bring in', 'services', 'help', 'specialize'
  ],
  CTA: [
    '–≤—Å—Ç—Ä–µ—á–∞', '–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è', '—Å–æ–∑–≤–æ–Ω', '–æ–±—Å—É–¥–∏—Ç—å', '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
    'meeting', 'chat', 'discuss', 'send', 'information', 'follow up', 'connect',
    'reach out', 'contact', 'call back'
  ],
  BRAND: [
    'Young Caesar', '–Ø Alex', '–º–µ–Ω—è –∑–æ–≤—É—Ç', '–∫–æ–º–ø–∞–Ω–∏—è', '–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é',
    'I\'m Alex', 'from Young Caesar', 'calling from', 'my name is', 'represent'
  ],
  STOP: [
    '–ø–æ–Ω–∏–º–∞—é', '–∫–æ–Ω–µ—á–Ω–æ', '–±–µ–∑—É—Å–ª–æ–≤–Ω–æ', '—Å–æ–≥–ª–∞—Å–µ–Ω', '–Ω–æ', '–æ–¥–Ω–∞–∫–æ', '–≤—Å—ë –∂–µ',
    'understand', 'appreciate', 'but', 'however', 'still', 'fair enough',
    'I get', 'totally', 'completely'
  ],
  APOLOGY: [
    '–∏–∑–≤–∏–Ω–∏—Ç–µ', '–ø—Ä–æ—Å—Ç–∏—Ç–µ', '—Å–æ–∂–∞–ª–µ—é', '–Ω–µ —Ö–æ—Ç–µ–ª', '–±–µ—Å–ø–æ–∫–æ–∏—Ç—å',
    'sorry', 'apologize', 'didn\'t mean', 'bother', 'disturb'
  ],
  WAIT: [
    '–ø–æ–¥–æ–∂–¥–∏—Ç–µ', '—Å–µ–∫—É–Ω–¥—É', '–º–∏–Ω—É—Ç—É', '–º–æ–º–µ–Ω—Ç', '—Å–µ–π—á–∞—Å',
    'wait', 'hold', 'moment', 'second', 'just a', 'one moment'
  ]
};

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤
const objectionKeywords = [
  '–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–Ω–µ –Ω—É–∂–Ω–æ', '–∑–∞–Ω—è—Ç', '–Ω–µ–∫–æ–≥–¥–∞', '–Ω–µ –º–æ–≥—É', '–Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏',
  'not interested', 'busy', 'no time', 'can\'t', 'don\'t need', 'not now',
  'remove', 'stop calling', 'don\'t call', 'take off', 'unsubscribe'
];

const refusalKeywords = [
  '–Ω–µ—Ç', '–æ—Ç–∫–∞–∑', '–Ω–µ –±—É–¥—É', '–Ω–µ —Ö–æ—á—É', '–Ω–µ –¥–∞–º', '–Ω–µ —Å–∫–∞–∂—É', '–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ',
  'no', 'refuse', 'won\'t', 'can\'t give', 'confidential', 'private', 'not allowed'
];

// –§—É–Ω–∫—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–∞–∑ –∞–≥–µ–Ω—Ç–∞
function categorizeAgentPhrase(message) {
  const text = message.toLowerCase();

  for (const [category, keywords] of Object.entries(categoryKeywords)) {
    if (keywords.some(keyword => text.includes(keyword.toLowerCase()))) {
      return category;
    }
  }

  return 'OTHER';
}

// –§—É–Ω–∫—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–∞–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤
function categorizeUserPhrase(message) {
  const text = message.toLowerCase();

  if (objectionKeywords.some(keyword => text.includes(keyword.toLowerCase()))) {
    return 'OBJECTIONS';
  }

  if (refusalKeywords.some(keyword => text.includes(keyword.toLowerCase()))) {
    return 'REFUSAL';
  }

  return 'OTHER';
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–≤–æ–Ω–æ–∫
let totalMessages = 0;
let agentMessages = 0;
let userMessages = 0;

calls.forEach((call, callIndex) => {
  if (!call.messages) return;

  call.messages.forEach(msg => {
    if (!msg.message || msg.role === 'system') return;

    totalMessages++;

    if (msg.role === 'assistant' || msg.role === 'bot') {
      agentMessages++;
      const category = categorizeAgentPhrase(msg.message);
      const phrase = msg.message.trim();

      if (phrase.length > 10) { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã
        const currentCount = agentPhrases[category].get(phrase) || 0;
        agentPhrases[category].set(phrase, currentCount + 1);
      }
    }
    else if (msg.role === 'user') {
      userMessages++;
      const category = categorizeUserPhrase(msg.message);
      const phrase = msg.message.trim();

      if (phrase.length > 5) { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã
        const currentCount = userPhrases[category].get(phrase) || 0;
        userPhrases[category].set(phrase, currentCount + 1);
      }
    }
  });

  if (callIndex % 100 === 0) {
    console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–≤–æ–Ω–∫–æ–≤: ${callIndex + 1}/${calls.length}`);
  }
});

console.log(`\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò ===`);
console.log(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${totalMessages}`);
console.log(`–°–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞: ${agentMessages}`);
console.log(`–°–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤: ${userMessages}`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–æ–ø —Ñ—Ä–∞–∑
function printTopPhrases(phrasesMap, category, limit = 10) {
  const sorted = Array.from(phrasesMap.entries())
    .sort((a, b) => b[1] - a[1])
    .slice(0, limit);

  console.log(`\n=== –¢–û–ü ${limit} –§–†–ê–ó: ${category} ===`);
  sorted.forEach(([phrase, count], index) => {
    console.log(`${index + 1}. [${count}x] ${phrase}`);
  });

  return sorted;
}

// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
console.log(`\n\nü§ñ === –ê–ù–ê–õ–ò–ó –§–†–ê–ó –ê–ì–ï–ù–¢–ê ===`);

Object.entries(agentPhrases).forEach(([category, phrasesMap]) => {
  if (phrasesMap.size > 0) {
    printTopPhrases(phrasesMap, category, 15);
  }
});

console.log(`\n\nüë§ === –ê–ù–ê–õ–ò–ó –§–†–ê–ó –ö–õ–ò–ï–ù–¢–û–í ===`);

Object.entries(userPhrases).forEach(([category, phrasesMap]) => {
  if (phrasesMap.size > 0) {
    printTopPhrases(phrasesMap, category, 15);
  }
});

// –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
const report = {
  metadata: {
    totalCalls: calls.length,
    totalMessages: totalMessages,
    agentMessages: agentMessages,
    userMessages: userMessages,
    processedAt: new Date().toISOString()
  },
  agentPhrases: {},
  userPhrases: {}
};

// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Map –≤ –æ–±—ã—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è JSON
Object.entries(agentPhrases).forEach(([category, phrasesMap]) => {
  report.agentPhrases[category] = Array.from(phrasesMap.entries())
    .sort((a, b) => b[1] - a[1])
    .map(([phrase, count]) => ({ phrase, count }));
});

Object.entries(userPhrases).forEach(([category, phrasesMap]) => {
  report.userPhrases[category] = Array.from(phrasesMap.entries())
    .sort((a, b) => b[1] - a[1])
    .map(([phrase, count]) => ({ phrase, count }));
});

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
const reportPath = path.join(__dirname, '..', 'data', 'processed', `agent_phrases_analysis_${new Date().toISOString().slice(0, 10)}.json`);
fs.writeFileSync(reportPath, JSON.stringify(report, null, 2), 'utf8');

console.log(`\nüìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
console.log(`\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!`);