const fs = require('fs');
require('dotenv').config();

class AssistantPromptsCollector {
    constructor() {
        this.apiKey = process.env.VAPI_API_KEY;
        this.baseUrl = 'https://api.vapi.ai';
    }

    async getAssistants() {
        console.log('üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤...');

        try {
            const response = await fetch(`${this.baseUrl}/assistant`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`API Error: ${response.status} ${response.statusText}`);
            }

            const assistants = await response.json();
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${assistants.length} –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤`);

            return assistants;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤:', error.message);
            return [];
        }
    }

    async getAssistantDetails(assistantId) {
        try {
            const response = await fetch(`${this.baseUrl}/assistant/${assistantId}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`API Error: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π ${assistantId}:`, error.message);
            return null;
        }
    }

    extractPromptInfo(assistant) {
        const info = {
            id: assistant.id,
            name: assistant.name,
            model: assistant.model?.model || 'unknown',
            systemMessage: assistant.model?.messages?.[0]?.content ||
                          assistant.model?.systemMessage ||
                          'No system message found',
            firstMessage: assistant.firstMessage || 'No first message',
            endCallMessage: assistant.endCallMessage || null,
            voice: assistant.voice?.provider || 'unknown',
            functions: assistant.model?.functions?.length || 0,
            serverUrl: assistant.serverUrl || null,
            createdAt: assistant.createdAt,
            updatedAt: assistant.updatedAt
        };

        return info;
    }

    async run() {
        console.log('üöÄ –ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–û–ú–ü–¢–û–í –ê–°–°–ò–°–¢–ï–ù–¢–û–í');
        console.log('=================================\n');

        try {
            const assistants = await this.getAssistants();

            if (assistants.length === 0) {
                console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤');
                return;
            }

            const assistantPrompts = [];

            console.log('üìù –ò–∑–≤–ª–µ–∫–∞—é –ø—Ä–æ–º–ø—Ç—ã –∏ –¥–µ—Ç–∞–ª–∏...');

            for (let i = 0; i < assistants.length; i++) {
                const assistant = assistants[i];
                console.log(`[${i + 1}/${assistants.length}] ${assistant.name}...`);

                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                const details = await this.getAssistantDetails(assistant.id);

                if (details) {
                    const promptInfo = this.extractPromptInfo(details);
                    assistantPrompts.push(promptInfo);

                    console.log(`  ‚úÖ ID: ${promptInfo.id}`);
                    console.log(`  üìù Model: ${promptInfo.model}`);
                    console.log(`  üìè Prompt length: ${promptInfo.systemMessage.length} chars`);
                    console.log(`  üîß Functions: ${promptInfo.functions}`);
                } else {
                    console.log(`  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏`);
                }

                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
                await new Promise(resolve => setTimeout(resolve, 500));
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
            const filename = `data/processed/assistant_prompts_${timestamp}.json`;

            // –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!fs.existsSync('data/processed')) {
                fs.mkdirSync('data/processed', { recursive: true });
            }

            fs.writeFileSync(filename, JSON.stringify(assistantPrompts, null, 2));

            console.log('\nüéâ –ó–ê–í–ï–†–®–ï–ù–û!');
            console.log(`üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${filename}`);
            console.log(`üìä –°–æ–±—Ä–∞–Ω–æ –ø—Ä–æ–º–ø—Ç–æ–≤: ${assistantPrompts.length}`);

            // –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ú–ü–¢–û–í:');
            assistantPrompts.forEach((ap, i) => {
                console.log(`${i + 1}. ${ap.name}:`);
                console.log(`   - –ü—Ä–æ–º–ø—Ç: ${ap.systemMessage.length} —Å–∏–º–≤–æ–ª–æ–≤`);
                console.log(`   - –ú–æ–¥–µ–ª—å: ${ap.model}`);
                console.log(`   - –§—É–Ω–∫—Ü–∏–∏: ${ap.functions}`);
            });

            return { success: true, filename, prompts: assistantPrompts };

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
            return { success: false, error: error.message };
        }
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const collector = new AssistantPromptsCollector();
    collector.run().catch(console.error);
}

module.exports = AssistantPromptsCollector;