require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function getSuccessfulRun() {
  const runId = 'a31c0c6e-3557-495e-b788-5709d951672b';

  const { data: run, error: runError } = await supabase
    .from('runs')
    .select('*')
    .eq('id', runId)
    .single();

  if (runError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è run:', runError);
    return;
  }

  console.log('\n' + '='.repeat(100));
  console.log('–£–°–ü–ï–®–ù–´–ô –ó–ê–ü–£–°–ö –ò–ù–ö–†–ï–ú–ï–ù–¢–ê–õ–¨–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò');
  console.log('GitHub Actions Run: https://github.com/LeonidSvb/YoungCaesar/actions/runs/18737830202');
  console.log('='.repeat(100));
  console.log('ID –∑–∞–ø—É—Å–∫–∞:', run.id);
  console.log('–°—Ç–∞—Ç—É—Å: ‚úÖ', run.status.toUpperCase());
  console.log('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:', run.started_at);
  console.log('–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', run.finished_at);
  console.log('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', (run.duration_ms / 1000).toFixed(2), '—Å–µ–∫—É–Ω–¥');
  console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:');
  console.log('  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ VAPI API:', run.records_fetched, '–∑–≤–æ–Ω–∫–æ–≤');
  console.log('  ‚ûï –í—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π:', run.records_inserted, '–∑–≤–æ–Ω–∫–æ–≤');
  console.log('  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', run.records_updated, '–∑–≤–æ–Ω–∫–æ–≤');
  console.log('  ‚ùå –û—à–∏–±–æ–∫:', run.records_failed);

  const { data: logs, error: logsError } = await supabase
    .from('logs')
    .select('*')
    .eq('run_id', runId)
    .order('timestamp', { ascending: true });

  if (!logsError && logs && logs.length > 0) {
    console.log('\n' + '='.repeat(100));
    console.log('–î–ï–¢–ê–õ–¨–ù–´–ï –õ–û–ì–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø (' + logs.length + ' –∑–∞–ø–∏—Å–µ–π)');
    console.log('='.repeat(100));

    const importantSteps = ['START', 'MODE', 'FETCH', 'SAVE', 'PROCESS', 'END'];

    logs.forEach((log, i) => {
      const time = new Date(log.timestamp).toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      });

      const icon = log.level === 'INFO' ? 'üìù' :
                   log.level === 'ERROR' ? '‚ùå' :
                   log.level === 'WARNING' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';

      let metaDisplay = '';
      if (log.meta && Object.keys(log.meta).length > 0) {
        if (log.meta.count !== undefined) {
          metaDisplay = ` [–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${log.meta.count}]`;
        } else if (log.meta.inserted !== undefined || log.meta.updated !== undefined) {
          metaDisplay = ` [–í—Å—Ç–∞–≤–ª–µ–Ω–æ: ${log.meta.inserted || 0}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${log.meta.updated || 0}]`;
        } else if (log.meta.new_versions !== undefined) {
          metaDisplay = ` [–ù–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π: ${log.meta.new_versions}]`;
        } else if (log.meta.start_date && log.meta.end_date) {
          metaDisplay = ` [–ü–µ—Ä–∏–æ–¥: ${log.meta.start_date} ‚Üí ${log.meta.end_date}]`;
        }
      }

      if (importantSteps.includes(log.step)) {
        console.log(`\n${icon} [${time}] [${log.step}] ${log.message}${metaDisplay}`);
      } else {
        console.log(`   [${time}] [${log.step}] ${log.message}${metaDisplay}`);
      }
    });
  }

  console.log('\n' + '='.repeat(100));
  console.log('–ò–¢–û–ì–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø');
  console.log('='.repeat(100));

  const { count: totalCalls } = await supabase
    .from('vapi_calls_raw')
    .select('*', { count: 'exact', head: true });

  console.log('üìä –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', totalCalls);

  const { data: recentCalls } = await supabase
    .from('vapi_calls_raw')
    .select('created_at')
    .order('created_at', { ascending: false })
    .limit(1)
    .single();

  if (recentCalls) {
    console.log('üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–≤–æ–Ω–æ–∫ –≤ –±–∞–∑–µ:', new Date(recentCalls.created_at).toLocaleString('ru-RU'));
  }

  const { data: oldestCall } = await supabase
    .from('vapi_calls_raw')
    .select('created_at')
    .order('created_at', { ascending: true })
    .limit(1)
    .single();

  if (oldestCall) {
    console.log('üìÖ –ü–µ—Ä–≤—ã–π –∑–≤–æ–Ω–æ–∫ –≤ –±–∞–∑–µ:', new Date(oldestCall.created_at).toLocaleString('ru-RU'));
  }

  console.log('\n' + '='.repeat(100));
  console.log('–ö–ê–ö –ü–†–û–°–ú–ê–¢–†–ò–í–ê–¢–¨ –õ–û–ì–ò –í SUPABASE:');
  console.log('='.repeat(100));
  console.log('1. –í—Å–µ –∑–∞–ø—É—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:');
  console.log('   SELECT * FROM runs WHERE script_name = \'vapi-sync\' ORDER BY started_at DESC;');
  console.log('\n2. –õ–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:');
  console.log(`   SELECT * FROM logs WHERE run_id = '${runId}' ORDER BY timestamp;`);
  console.log('\n3. –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏:');
  console.log('   SELECT * FROM logs WHERE level = \'ERROR\' ORDER BY timestamp DESC;');
  console.log('\n4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∑–∞–ø—É—Å–∫–∞–º:');
  console.log('   SELECT status, COUNT(*) as count, SUM(records_inserted) as total_inserted');
  console.log('   FROM runs WHERE script_name = \'vapi-sync\' GROUP BY status;');
  console.log('\n' + '='.repeat(100));
}

getSuccessfulRun().catch(console.error);
