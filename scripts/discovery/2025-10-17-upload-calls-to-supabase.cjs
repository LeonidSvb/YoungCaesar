require('dotenv').config({ path: '../../.env' });
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const { randomUUID } = require('crypto');

// Supabase –∫–ª–∏–µ–Ω—Ç
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  INPUT_FILE: 'production_scripts/vapi_collection/results/2025-09-17T09-51-00_vapi_calls_2025-01-01_to_2025-09-17_cost-0.03.json',
  BATCH_SIZE: 100,
  DRY_RUN: false // true = –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç
};

// –§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ VAPI call ‚Üí Supabase row
function transformCall(call) {
  return {
    // Primary fields
    id: call.id,
    assistant_id: call.assistantId || null,
    customer_id: call.customerId || null,
    org_id: call.orgId || null,

    // Call info
    type: call.type || null,
    status: call.status || null,
    ended_reason: call.endedReason || null,

    // Timestamps
    created_at: call.createdAt || null,
    started_at: call.startedAt || null,
    ended_at: call.endedAt || null,

    // Duration (–≤—ã—á–∏—Å–ª—è–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å)
    duration_seconds: call.startedAt && call.endedAt
      ? Math.round((new Date(call.endedAt) - new Date(call.startedAt)) / 1000)
      : null,

    // Content
    transcript: call.transcript || null,
    summary: call.summary || null,

    // Customer
    customer_phone_number: call.customer?.number || null,

    // Cost
    cost: call.cost || 0,

    // Recordings
    recording_url: call.recordingUrl || null,
    stereo_recording_url: call.stereoRecordingUrl || null,

    // Provider info
    phone_number_id: call.phoneNumberId || null,
    phone_call_provider: call.phoneCallProvider || null,
    phone_call_transport: call.phoneCallTransport || null,

    // VAPI analysis
    vapi_summary: call.analysis?.summary || null,
    vapi_success_evaluation: call.analysis?.successEvaluation || null,

    // FULL RAW DATA (–≤–µ—Å—å –æ–±—ä–µ–∫—Ç!)
    raw_json: call,

    // Sync metadata
    synced_at: new Date().toISOString()
  };
}

async function uploadCalls() {
  console.log('='.repeat(60));
  console.log('üì§ –ó–ê–ì–†–£–ó–ö–ê VAPI –ó–í–û–ù–ö–û–í –í SUPABASE');
  console.log('='.repeat(60));

  // –°–æ–∑–¥–∞—ë–º batch_id –¥–ª—è sync_logs
  const batchId = randomUUID();
  const startTime = Date.now();

  // –ù–∞—á–∏–Ω–∞–µ–º sync log
  const { data: logData } = await supabase
    .from('sync_logs')
    .insert({
      batch_id: batchId,
      object_type: 'calls',
      triggered_by: 'manual',
      status: 'in_progress'
    })
    .select('id')
    .single();

  const logId = logData.id;
  console.log(`\nüìã Sync batch ID: ${batchId}`);
  console.log(`üìã Log ID: ${logId}\n`);

  // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  console.log(`üìÇ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: ${CONFIG.INPUT_FILE}`);
  const calls = JSON.parse(fs.readFileSync(CONFIG.INPUT_FILE, 'utf8'));
  console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${calls.length} –∑–≤–æ–Ω–∫–æ–≤\n`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ IDs (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å)
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏...');
  const allIds = calls.map(c => c.id);
  const { data: existingRecords } = await supabase
    .from('vapi_calls_raw')
    .select('id')
    .in('id', allIds);

  const existingIds = new Set(existingRecords?.map(r => r.id) || []);
  console.log(`üìä –£–∂–µ –≤ –±–∞–∑–µ: ${existingIds.size} –∑–≤–æ–Ω–∫–æ–≤`);
  console.log(`üìä –ù–æ–≤—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ${calls.length - existingIds.size}\n`);

  // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º
  const transformed = calls.map(transformCall);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  let inserted = 0;
  let updated = 0;
  let failed = 0;

  if (CONFIG.DRY_RUN) {
    console.log('üß™ DRY RUN MODE - –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º:');
    console.log('\n–ü—Ä–∏–º–µ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏:');
    console.log(JSON.stringify(transformed[0], null, 2).substring(0, 500) + '...');
    return;
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞—Ç—á–∞–º–∏
  console.log(`‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–∞—Ç—á–∞–º–∏ –ø–æ ${CONFIG.BATCH_SIZE}...\n`);

  for (let i = 0; i < transformed.length; i += CONFIG.BATCH_SIZE) {
    const batch = transformed.slice(i, i + CONFIG.BATCH_SIZE);
    const batchNum = Math.floor(i / CONFIG.BATCH_SIZE) + 1;
    const totalBatches = Math.ceil(transformed.length / CONFIG.BATCH_SIZE);

    // –°—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–µ vs updates
    const batchInserts = batch.filter(c => !existingIds.has(c.id)).length;
    const batchUpdates = batch.length - batchInserts;

    process.stdout.write(`üì¶ Batch ${batchNum}/${totalBatches} (${batch.length} records, ${batchInserts} new, ${batchUpdates} updates)... `);

    // Upsert (insert + update)
    const { error } = await supabase
      .from('vapi_calls_raw')
      .upsert(batch, {
        onConflict: 'id',
        ignoreDuplicates: false
      });

    if (error) {
      console.log(`‚ùå FAILED`);
      console.error('Error:', error.message);
      failed += batch.length;
    } else {
      console.log(`‚úÖ OK`);
      inserted += batchInserts;
      updated += batchUpdates;
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å Supabase)
    if (i + CONFIG.BATCH_SIZE < transformed.length) {
      await new Promise(resolve => setTimeout(resolve, 100));
    }
  }

  // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const duration = Math.round((Date.now() - startTime) / 1000);

  console.log('\n' + '='.repeat(60));
  console.log('‚úÖ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
  console.log('='.repeat(60));
  console.log(`‚è±Ô∏è  –í—Ä–µ–º—è: ${duration}s`);
  console.log(`üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${calls.length}`);
  console.log(`‚úÖ –ù–æ–≤—ã—Ö –≤—Å—Ç–∞–≤–ª–µ–Ω–æ: ${inserted}`);
  console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${failed}`);
  console.log(`üìà Success rate: ${Math.round(((inserted + updated) / calls.length) * 100)}%`);
  console.log('='.repeat(60));

  // –û–±–Ω–æ–≤–ª—è–µ–º sync log
  await supabase
    .from('sync_logs')
    .update({
      sync_completed_at: new Date().toISOString(),
      duration_seconds: duration,
      records_fetched: calls.length,
      records_inserted: inserted,
      records_updated: updated,
      records_failed: failed,
      status: failed === 0 ? 'success' : 'partial'
    })
    .eq('id', logId);

  console.log(`\nüìã Sync log –æ–±–Ω–æ–≤–ª—ë–Ω (ID: ${logId})`);
}

// –ó–∞–ø—É—Å–∫
uploadCalls()
  .then(() => {
    console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ!');
    process.exit(0);
  })
  .catch(error => {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  });
