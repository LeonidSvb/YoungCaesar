const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../../.env') });
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_ANON_KEY
);

async function fetchCallsForQCI() {
    console.log('=== –ü–û–õ–£–ß–ï–ù–ò–ï –ó–í–û–ù–ö–û–í –î–õ–Ø QCI –ê–ù–ê–õ–ò–ó–ê ===\n');

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–≤–æ–Ω–∫–∏ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–º
    const { data: allCalls } = await supabase
        .from('vapi_calls_raw')
        .select('id, transcript, assistant_id, created_at')
        .not('transcript', 'is', null);

    console.log(`–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–º: ${allCalls.length}`);

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ QCI –∞–Ω–∞–ª–∏–∑—ã
    const { data: existingQCI } = await supabase
        .from('qci_analyses')
        .select('call_id');

    console.log(`–°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö QCI –∞–Ω–∞–ª–∏–∑–æ–≤: ${existingQCI?.length || 0}`);

    const qciSet = new Set((existingQCI || []).map(q => q.call_id));

    // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∑–≤–æ–Ω–∫–∏ –ë–ï–ó QCI –∏ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–º > 100 —Å–∏–º–≤–æ–ª–æ–≤
    const callsNeedingQCI = allCalls
        .filter(c =>
            c.transcript &&
            c.transcript.length > 100 &&
            !qciSet.has(c.id)
        )
        .map(c => ({
            id: c.id,
            assistantId: c.assistant_id,
            transcript: c.transcript
        }));

    console.log(`\n–ó–≤–æ–Ω–∫–æ–≤ –ë–ï–ó QCI (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç > 100): ${callsNeedingQCI.length}`);

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–ª–∏–Ω–µ
    const lengths = {
        '101-500': 0,
        '501-1000': 0,
        '1001-5000': 0,
        '5000+': 0
    };

    callsNeedingQCI.forEach(call => {
        const len = call.transcript.length;
        if (len <= 500) lengths['101-500']++;
        else if (len <= 1000) lengths['501-1000']++;
        else if (len <= 5000) lengths['1001-5000']++;
        else lengths['5000+']++;
    });

    console.log('\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–ª–∏–Ω–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞:');
    Object.entries(lengths).forEach(([range, count]) => {
        console.log(`  ${range}: ${count} –∑–≤–æ–Ω–∫–æ–≤`);
    });

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª –¥–ª—è QCI analyzer
    const outputPath = path.resolve(__dirname, '../../production_scripts/qci_analysis/results/calls_for_analysis.json');

    // –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const dir = path.dirname(outputPath);
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
    }

    fs.writeFileSync(outputPath, JSON.stringify(callsNeedingQCI, null, 2));

    console.log(`\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: ${outputPath}`);
    console.log(`üìä –ì–æ—Ç–æ–≤–æ –∫ –∞–Ω–∞–ª–∏–∑—É: ${callsNeedingQCI.length} –∑–≤–æ–Ω–∫–æ–≤`);
}

fetchCallsForQCI().catch(console.error);
