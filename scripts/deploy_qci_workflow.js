const fs = require('fs');
const path = require('path');
require('dotenv').config({ path: '.env.mcp' });

class N8NWorkflowDeployer {
    constructor() {
        this.baseUrl = process.env.N8N_API_URL;
        this.apiKey = process.env.N8N_API_KEY;
        
        if (!this.baseUrl || !this.apiKey) {
            throw new Error('N8N_API_URL –∏ N8N_API_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env.mcp');
        }
        
        console.log(`üöÄ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ N8N: ${this.baseUrl}`);
    }

    async makeRequest(endpoint, method = 'GET', data = null) {
        const url = `${this.baseUrl}${endpoint}`;
        
        const options = {
            method,
            headers: {
                'X-N8N-API-KEY': this.apiKey,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        };

        if (data && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {
            options.body = JSON.stringify(data);
        }

        try {
            const fetch = (await import('node-fetch')).default;
            const response = await fetch(url, options);
            
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }
            
            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('application/json')) {
                return await response.json();
            } else {
                return await response.text();
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${endpoint}:`, error.message);
            throw error;
        }
    }

    async listWorkflows() {
        try {
            console.log('üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö workflows...');
            const workflows = await this.makeRequest('/workflows');
            return workflows.data || workflows;
        } catch (error) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ workflows:', error.message);
            return [];
        }
    }

    async deleteWorkflow(workflowId) {
        try {
            console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º workflow ${workflowId}...`);
            await this.makeRequest(`/workflows/${workflowId}`, 'DELETE');
            console.log(`‚úÖ Workflow ${workflowId} —É–¥–∞–ª–µ–Ω`);
            return true;
        } catch (error) {
            console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å workflow ${workflowId}:`, error.message);
            return false;
        }
    }

    async createWorkflow(workflowData) {
        try {
            console.log(`üì• –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π workflow: ${workflowData.name}`);
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è)
            const createData = {
                name: workflowData.name,
                nodes: workflowData.nodes,
                connections: workflowData.connections,
                settings: {}
            };

            const result = await this.makeRequest('/workflows', 'POST', createData);
            console.log(`‚úÖ Workflow —Å–æ–∑–¥–∞–Ω —Å ID: ${result.id || result.data?.id}`);
            return result;
        } catch (error) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å workflow:', error.message);
            throw error;
        }
    }

    async activateWorkflow(workflowId) {
        try {
            console.log(`‚ö° –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º workflow ${workflowId}...`);
            const result = await this.makeRequest(`/workflows/${workflowId}/activate`, 'POST');
            console.log(`‚úÖ Workflow ${workflowId} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
            return result;
        } catch (error) {
            console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å workflow ${workflowId}:`, error.message);
            return false;
        }
    }

    async setupCredentials() {
        try {
            console.log('üîë –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º credentials...');
            console.log('‚ö†Ô∏è Credentials —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ UI n8n');
            console.log('üìã –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å:');
            console.log('   - VAPI API Key (HTTP Header Auth)');
            console.log('   - OpenAI API Key');  
            console.log('   - Airtable API Key');
            console.log('   - Webhook Basic Auth');
            return;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ credentials:', error.message);
        }
    }

    async deployWorkflow(workflowPath) {
        try {
            console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ QCI Workflow...');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª workflow
            if (!fs.existsSync(workflowPath)) {
                throw new Error(`–§–∞–π–ª workflow –Ω–µ –Ω–∞–π–¥–µ–Ω: ${workflowPath}`);
            }
            
            const workflowData = JSON.parse(fs.readFileSync(workflowPath, 'utf8'));
            console.log(`üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω workflow: ${workflowData.name}`);
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º credentials
            await this.setupCredentials();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ workflows
            const existingWorkflows = await this.listWorkflows();
            const existingWorkflow = existingWorkflows.find(w => w.name === workflowData.name);
            
            if (existingWorkflow) {
                console.log(`‚ö†Ô∏è Workflow "${workflowData.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                console.log('üîÑ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é...');
                await this.deleteWorkflow(existingWorkflow.id);
                
                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                await new Promise(resolve => setTimeout(resolve, 2000));
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π workflow
            const newWorkflow = await this.createWorkflow(workflowData);
            const workflowId = newWorkflow.id || newWorkflow.data?.id;
            
            if (!workflowId) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ workflow');
            }
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º workflow
            await new Promise(resolve => setTimeout(resolve, 3000));
            await this.activateWorkflow(workflowId);
            
            console.log('\\nüéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
            console.log(`üìã Workflow ID: ${workflowId}`);
            console.log(`üîó Webhook URL: ${this.baseUrl.replace('/api/v1', '')}/webhook/vapi-qci-enhanced`);
            console.log(`üìä Dashboard: ${this.baseUrl.replace('/api/v1', '')}/workflows/${workflowId}`);
            
            return {
                success: true,
                workflowId,
                webhookUrl: `${this.baseUrl.replace('/api/v1', '')}/webhook/vapi-qci-enhanced`
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏:', error.message);
            return {
                success: false,
                error: error.message
            };
        }
    }
}

// CLI –∑–∞–ø—É—Å–∫
if (require.main === module) {
    const deployer = new N8NWorkflowDeployer();
    const workflowPath = path.join(__dirname, '..', 'n8n_workflows', 'Enhanced_QCI_Workflow.json');
    
    deployer.deployWorkflow(workflowPath)
        .then(result => {
            if (result.success) {
                console.log('\\n‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
                console.log(`üîó Webhook URL –¥–ª—è VAPI: ${result.webhookUrl}`);
                process.exit(0);
            } else {
                console.error('\\n‚ùå –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', result.error);
                process.exit(1);
            }
        })
        .catch(error => {
            console.error('\\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
            process.exit(1);
        });
}

module.exports = N8NWorkflowDeployer;