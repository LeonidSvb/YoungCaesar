require('dotenv').config();

// ============================================================
// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
// ============================================================

const { createClient } = require('@supabase/supabase-js');

async function testSupabaseConnection() {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const requiredEnvVars = [
        'SUPABASE_URL',
        'SUPABASE_ANON_KEY',
        'SUPABASE_PROJECT_REF'
    ];

    const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);

    if (missingVars.length > 0) {
        console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
        missingVars.forEach(varName => {
            console.log(`   - ${varName}`);
        });
        console.log('\nüìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env');
        return;
    }

    console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã:');
    console.log(`   - SUPABASE_URL: ${process.env.SUPABASE_URL}`);
    console.log(`   - SUPABASE_PROJECT_REF: ${process.env.SUPABASE_PROJECT_REF}`);
    console.log(`   - SUPABASE_ANON_KEY: ${process.env.SUPABASE_ANON_KEY.substring(0, 20)}...`);

    if (process.env.SUPABASE_ACCESS_TOKEN && process.env.SUPABASE_ACCESS_TOKEN !== 'YOUR_PERSONAL_ACCESS_TOKEN_HERE') {
        console.log(`   - SUPABASE_ACCESS_TOKEN: ${process.env.SUPABASE_ACCESS_TOKEN.substring(0, 20)}...`);
    } else {
        console.log('   - SUPABASE_ACCESS_TOKEN: ‚ö†Ô∏è  –ù–ï –ù–ê–°–¢–†–û–ï–ù (–Ω—É–∂–µ–Ω –¥–ª—è MCP)');
    }

    console.log('\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');

    try {
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
        const supabase = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_ANON_KEY
        );

        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        console.log('üì° –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞...');
        const { data: healthData, error: healthError } = await supabase
            .from('_supabase_system')
            .select('*')
            .limit(1);

        if (healthError && healthError.code !== 'PGRST116') {
            console.log(`   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ${healthError.message}`);
        } else {
            console.log('   ‚úÖ –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω');
        }

        // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ REST API
        console.log('\nüìä –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ information_schema
        const { data: tablesData, error: tablesError } = await supabase
            .rpc('get_table_list')
            .select('*');

        if (tablesError) {
            console.log(`   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü: ${tablesError.message}`);
            console.log('   üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ get_table_list');
        } else {
            console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü: ${tablesData?.length || 0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
        }

        // –¢–µ—Å—Ç 3: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        console.log('\nüîç –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

        const { data: versionData, error: versionError } = await supabase
            .rpc('version');

        if (versionError) {
            console.log(`   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é: ${versionError.message}`);
        } else {
            console.log(`   ‚úÖ –í–µ—Ä—Å–∏—è PostgreSQL –ø–æ–ª—É—á–µ–Ω–∞`);
        }

        console.log('\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢:');
        console.log('‚úÖ –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('üìå URL –ø—Ä–æ–µ–∫—Ç–∞:', process.env.SUPABASE_URL);
        console.log('üìå Project Ref:', process.env.SUPABASE_PROJECT_REF);

        if (!process.env.SUPABASE_ACCESS_TOKEN || process.env.SUPABASE_ACCESS_TOKEN === 'YOUR_PERSONAL_ACCESS_TOKEN_HERE') {
            console.log('\n‚ö†Ô∏è  –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì:');
            console.log('1. –ü–æ–ª—É—á–∏—Ç–µ Personal Access Token –≤ Supabase Dashboard');
            console.log('2. –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_PERSONAL_ACCESS_TOKEN_HERE –≤ .env —Ñ–∞–π–ª–µ');
            console.log('3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Claude Desktop –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ MCP');
        } else {
            console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å MCP!');
        }

    } catch (error) {
        console.log('\n‚ùå –û–®–ò–ë–ö–ê –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
        console.log(`   ${error.message}`);
        console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
        console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å SUPABASE_URL');
        console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å SUPABASE_ANON_KEY');
        console.log('3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω –≤ Supabase Dashboard');
    }
}

if (require.main === module) {
    testSupabaseConnection();
}

module.exports = testSupabaseConnection;