name: QCI Analysis - Automated Quality Scoring

on:
  schedule:
    # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 02:00 UTC (05:00 MSK)
    - cron: '0 2 * * *'
  workflow_dispatch:
    # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å –æ–ø—Ü–∏—è–º–∏
    inputs:
      mode:
        description: 'Analysis mode'
        required: false
        default: 'incremental'
        type: choice
        options:
          - incremental  # –¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–≤–æ–Ω–∫–∏
          - full         # –í—Å–µ –∑–≤–æ–Ω–∫–∏
          - test         # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (50 –∑–≤–æ–Ω–∫–æ–≤)

jobs:
  qci-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # QCI –∞–Ω–∞–ª–∏–∑ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1 —á–∞—Å–∞

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Debug environment
        run: |
          echo "Mode: ${{ github.event.inputs.mode || 'incremental' }}"
          echo "SUPABASE_URL is set: ${{ secrets.SUPABASE_URL != '' }}"
          echo "OPENAI_API_KEY is set: ${{ secrets.OPENAI_API_KEY != '' }}"

      - name: Fetch calls from Supabase for QCI analysis
        id: fetch_calls
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤ –ë–ï–ó QCI
          node << 'EOF'
          const { createClient } = require('@supabase/supabase-js');
          const fs = require('fs');

          const supabase = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_SERVICE_ROLE_KEY
          );

          async function fetchCallsForQCI() {
            // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–≤–æ–Ω–∫–∏ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–º > 100 —Å–∏–º–≤–æ–ª–æ–≤ –ë–ï–ó QCI
            const { data: calls } = await supabase
              .from('vapi_calls_raw')
              .select('id, transcript, assistant_id, created_at')
              .not('transcript', 'is', null);

            const { data: existingQCI } = await supabase
              .from('qci_analyses')
              .select('call_id');

            const qciSet = new Set(existingQCI.map(q => q.call_id));

            const callsNeedingQCI = calls
              .filter(c =>
                c.transcript &&
                c.transcript.length > 100 &&
                !qciSet.has(c.id)
              )
              .map(c => ({
                id: c.id,
                assistantId: c.assistant_id,
                transcript: c.transcript
              }));

            console.log(`Found ${callsNeedingQCI.length} calls needing QCI analysis`);

            // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª –¥–ª—è QCI analyzer
            fs.writeFileSync(
              'production_scripts/qci_analysis/results/calls_for_analysis.json',
              JSON.stringify(callsNeedingQCI, null, 2)
            );

            return callsNeedingQCI.length;
          }

          fetchCallsForQCI().catch(console.error);
          EOF

      - name: Run QCI Analysis
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          # –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é QCI analyzer –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
          cd production_scripts/qci_analysis

          # –ó–∞–ø—É—Å—Ç–∏—Ç—å QCI –∞–Ω–∞–ª–∏–∑
          node qci_analyzer.js

          echo "‚úÖ QCI analysis completed"

      - name: Sync QCI results to Supabase
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          cd production_scripts/qci_analysis
          node sync_qci_to_supabase.js

          echo "‚úÖ QCI results synced to Supabase"

      - name: Upload QCI results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qci-results-${{ github.run_number }}
          path: production_scripts/qci_analysis/results/*.json
          retention-days: 30

      - name: Check QCI analysis status
        if: failure()
        run: |
          echo "‚ùå QCI analysis failed! Check logs in Supabase runs table."
          exit 1

      - name: Summary
        if: success()
        run: |
          echo "‚úÖ QCI Analysis Workflow Completed Successfully"
          echo "üìä Check dashboard at: https://your-vercel-app.vercel.app/dashboard"
