require('dotenv').config({ path: '../../.env' });

// ============================================================
// VAPI to Supabase Migration Script
// –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ –≤ Supabase
// ============================================================

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// ============================================================
// CONFIGURATION
// ============================================================

const CONFIG = {
    // –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
    INPUT_FILES: {
        VAPI_CALLS: '../vapi_collection/results/2025-09-17T09-51-00_vapi_calls_2025-01-01_to_2025-09-17_cost-0.03.json',
        QCI_ANALYSES: '../qci_analysis/results/qci_full_calls_with_assistants_latest.json',
        PROMPT_OPTIMIZATIONS: '../prompt_optimization/results/recommendations_2025-09-22T11-24-53.json'
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞—Ç—á–µ–π
    BATCH_SIZE: 100,

    // –†–µ–∂–∏–º —Å—É—Ö–æ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞ (–Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –ë–î)
    DRY_RUN: false,

    // –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
    CLEAR_EXISTING_DATA: false
};

class SupabaseMigrator {
    constructor() {
        this.supabase = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_ANON_KEY
        );

        this.stats = {
            organizations: { created: 0, skipped: 0 },
            assistants: { created: 0, skipped: 0 },
            phone_numbers: { created: 0, skipped: 0 },
            calls: { created: 0, skipped: 0, errors: 0 },
            qci_analyses: { created: 0, skipped: 0, errors: 0 },
            prompt_optimizations: { created: 0, skipped: 0, errors: 0 }
        };

        this.cache = {
            organizations: new Map(),
            assistants: new Map(),
            phone_numbers: new Map()
        };
    }

    async testConnection() {
        console.log('üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');

        try {
            const { data, error } = await this.supabase.from('organizations').select('count').limit(1);
            if (error) throw error;

            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
            return false;
        }
    }

    async clearExistingData() {
        if (!CONFIG.CLEAR_EXISTING_DATA) return;

        console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');

        const tables = [
            'call_participants',
            'prompt_optimizations',
            'qci_analyses',
            'calls',
            'prompts',
            'phone_numbers',
            'assistants',
            'organizations'
        ];

        for (const table of tables) {
            if (!CONFIG.DRY_RUN) {
                const { error } = await this.supabase.from(table).delete().gte('created_at', '1900-01-01');
                if (error) {
                    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ ${table}:`, error.message);
                } else {
                    console.log(`üóëÔ∏è –û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: ${table}`);
                }
            } else {
                console.log(`üóëÔ∏è [DRY RUN] –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: ${table}`);
            }
        }
    }

    async loadJsonFile(filePath) {
        const fullPath = path.resolve(__dirname, filePath);
        if (!fs.existsSync(fullPath)) {
            console.warn(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fullPath}`);
            return null;
        }

        try {
            const data = JSON.parse(fs.readFileSync(fullPath, 'utf8'));
            console.log(`üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${path.basename(filePath)}`);
            return data;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
            return null;
        }
    }

    async createOrganization(orgId, orgName = 'Default Organization') {
        if (this.cache.organizations.has(orgId)) {
            return this.cache.organizations.get(orgId);
        }

        const organizationData = {
            vapi_org_id: orgId,
            name: orgName,
            is_active: true
        };

        if (CONFIG.DRY_RUN) {
            console.log(`üè¢ [DRY RUN] –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: ${orgName}`);
            const fakeId = `org-${Date.now()}`;
            this.cache.organizations.set(orgId, fakeId);
            this.stats.organizations.created++;
            return fakeId;
        }

        try {
            const { data, error } = await this.supabase
                .from('organizations')
                .upsert(organizationData, {
                    onConflict: 'vapi_org_id',
                    ignoreDuplicates: false
                })
                .select()
                .single();

            if (error) throw error;

            this.cache.organizations.set(orgId, data.id);
            this.stats.organizations.created++;
            console.log(`üè¢ –°–æ–∑–¥–∞–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ${orgName}`);
            return data.id;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:`, error.message);
            this.stats.organizations.skipped++;
            return null;
        }
    }

    async createAssistant(assistantId, organizationId, name = `Assistant ${assistantId.substring(0, 8)}`) {
        if (this.cache.assistants.has(assistantId)) {
            return this.cache.assistants.get(assistantId);
        }

        const assistantData = {
            vapi_assistant_id: assistantId,
            organization_id: organizationId,
            name: name,
            is_active: true,
            configuration: {}
        };

        if (CONFIG.DRY_RUN) {
            console.log(`ü§ñ [DRY RUN] –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: ${name}`);
            const fakeId = `assistant-${Date.now()}`;
            this.cache.assistants.set(assistantId, fakeId);
            this.stats.assistants.created++;
            return fakeId;
        }

        try {
            const { data, error } = await this.supabase
                .from('assistants')
                .upsert(assistantData, {
                    onConflict: 'vapi_assistant_id',
                    ignoreDuplicates: false
                })
                .select()
                .single();

            if (error) throw error;

            this.cache.assistants.set(assistantId, data.id);
            this.stats.assistants.created++;
            console.log(`ü§ñ –°–æ–∑–¥–∞–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: ${name}`);
            return data.id;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:`, error.message);
            this.stats.assistants.skipped++;
            return null;
        }
    }

    async createPhoneNumber(phoneNumberId, organizationId, phoneNumber) {
        if (this.cache.phone_numbers.has(phoneNumberId)) {
            return this.cache.phone_numbers.get(phoneNumberId);
        }

        const phoneData = {
            vapi_phone_id: phoneNumberId,
            organization_id: organizationId,
            phone_number: phoneNumber,
            is_active: true
        };

        if (CONFIG.DRY_RUN) {
            console.log(`üìû [DRY RUN] –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞: ${phoneNumber}`);
            const fakeId = `phone-${Date.now()}`;
            this.cache.phone_numbers.set(phoneNumberId, fakeId);
            this.stats.phone_numbers.created++;
            return fakeId;
        }

        try {
            const { data, error } = await this.supabase
                .from('phone_numbers')
                .upsert(phoneData, {
                    onConflict: 'vapi_phone_id',
                    ignoreDuplicates: false
                })
                .select()
                .single();

            if (error) throw error;

            this.cache.phone_numbers.set(phoneNumberId, data.id);
            this.stats.phone_numbers.created++;
            return data.id;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞:`, error.message);
            this.stats.phone_numbers.skipped++;
            return null;
        }
    }

    async migrateCalls(callsData) {
        console.log(`\nüìû –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ ${callsData.length} –∑–≤–æ–Ω–∫–æ–≤...`);

        for (let i = 0; i < callsData.length; i += CONFIG.BATCH_SIZE) {
            const batch = callsData.slice(i, Math.min(i + CONFIG.BATCH_SIZE, callsData.length));
            await this.procesCallsBatch(batch, i + 1);

            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            if (i + CONFIG.BATCH_SIZE < callsData.length) {
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }
    }

    async procesCallsBatch(callsBatch, batchStart) {
        console.log(`üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ –∑–≤–æ–Ω–∫–æ–≤ ${batchStart}-${batchStart + callsBatch.length - 1}...`);

        const callsToInsert = [];

        for (const call of callsBatch) {
            try {
                // –°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                const organizationId = await this.createOrganization(call.orgId);
                if (!organizationId) continue;

                // –°–æ–∑–¥–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                const assistantId = await this.createAssistant(call.assistantId, organizationId);
                if (!assistantId) continue;

                // –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
                let phoneNumberId = null;
                if (call.phoneNumberId) {
                    const customerPhone = call.customer?.number || 'unknown';
                    phoneNumberId = await this.createPhoneNumber(call.phoneNumberId, organizationId, customerPhone);
                }

                const callData = {
                    vapi_call_id: call.id,
                    assistant_id: assistantId,
                    phone_number_id: phoneNumberId,
                    organization_id: organizationId,
                    call_type: call.type || 'outbound',
                    status: call.status || 'ended',
                    ended_reason: call.endedReason,
                    started_at: call.startedAt,
                    ended_at: call.endedAt,
                    transcript: call.transcript,
                    summary: call.summary,
                    recording_url: call.recordingUrl,
                    customer_number: call.customer?.number,
                    customer_info: call.customer || {},
                    cost: call.cost,
                    raw_data: call
                };

                callsToInsert.push(callData);

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–∞ ${call.id}:`, error.message);
                this.stats.calls.errors++;
            }
        }

        // –í—Å—Ç–∞–≤–ª—è–µ–º –±–∞—Ç—á
        if (callsToInsert.length > 0 && !CONFIG.DRY_RUN) {
            try {
                const { data, error } = await this.supabase
                    .from('calls')
                    .upsert(callsToInsert, {
                        onConflict: 'vapi_call_id',
                        ignoreDuplicates: true
                    })
                    .select('id');

                if (error) throw error;

                this.stats.calls.created += data?.length || callsToInsert.length;
                console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ ${data?.length || callsToInsert.length} –∑–≤–æ–Ω–∫–æ–≤`);

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –±–∞—Ç—á–∞ –∑–≤–æ–Ω–∫–æ–≤:`, error.message);
                this.stats.calls.errors += callsToInsert.length;
            }
        } else if (CONFIG.DRY_RUN) {
            console.log(`‚úÖ [DRY RUN] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${callsToInsert.length} –∑–≤–æ–Ω–∫–æ–≤`);
            this.stats.calls.created += callsToInsert.length;
        }
    }

    async migrateQciAnalyses(qciData) {
        if (!qciData?.results) {
            console.log('‚ö†Ô∏è QCI –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }

        console.log(`\nüìä –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ ${qciData.results.length} QCI –∞–Ω–∞–ª–∏–∑–æ–≤...`);

        for (let i = 0; i < qciData.results.length; i += CONFIG.BATCH_SIZE) {
            const batch = qciData.results.slice(i, Math.min(i + CONFIG.BATCH_SIZE, qciData.results.length));
            await this.processQciBatch(batch, i + 1);

            if (i + CONFIG.BATCH_SIZE < qciData.results.length) {
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }
    }

    async processQciBatch(qciBatch, batchStart) {
        console.log(`üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ QCI ${batchStart}-${batchStart + qciBatch.length - 1}...`);

        if (CONFIG.DRY_RUN) {
            console.log(`‚úÖ [DRY RUN] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${qciBatch.length} QCI –∞–Ω–∞–ª–∏–∑–æ–≤`);
            this.stats.qci_analyses.created += qciBatch.length;
            return;
        }

        const qciToInsert = qciBatch.map(qci => ({
            call_id: `(SELECT id FROM calls WHERE vapi_call_id = '${qci.call_id}')`,
            assistant_id: `(SELECT id FROM assistants WHERE vapi_assistant_id = '${qci.assistant_id}')`,
            qci_total_score: qci.qci_total,
            dynamics_score: qci.dynamics,
            objections_score: qci.objections,
            brand_score: qci.brand,
            outcome_score: qci.outcome,
            status: qci.status,
            evidence: qci.ai_analysis?.evidence || {},
            coaching_tips: qci.ai_analysis?.coaching_tips || [],
            ai_model: 'gpt-4o-mini',
            analysis_cost: qci.cost,
            tokens_used: qci.tokens,
            analyzed_at: qci.timestamp,
            raw_analysis: qci.ai_analysis
        }));

        // –î–ª—è QCI –∏—Å–ø–æ–ª—å–∑—É–µ–º raw SQL –∏–∑-–∑–∞ –ø–æ–¥–∑–∞–ø—Ä–æ—Å–æ–≤
        const values = qciToInsert.map(qci =>
            `(${qci.call_id}, ${qci.assistant_id}, ${qci.qci_total_score}, ${qci.dynamics_score}, ${qci.objections_score}, ${qci.brand_score}, ${qci.outcome_score}, '${qci.status}', '${JSON.stringify(qci.evidence).replace(/'/g, "''")}', ARRAY['${qci.coaching_tips.join("', '")}'], '${qci.ai_model}', ${qci.analysis_cost}, ${qci.tokens_used}, '${qci.analyzed_at}', '${JSON.stringify(qci.raw_analysis).replace(/'/g, "''")}')`
        ).join(',');

        const sql = `
            INSERT INTO qci_analyses (call_id, assistant_id, qci_total_score, dynamics_score, objections_score, brand_score, outcome_score, status, evidence, coaching_tips, ai_model, analysis_cost, tokens_used, analyzed_at, raw_analysis)
            VALUES ${values}
            ON CONFLICT (call_id) DO NOTHING;
        `;

        try {
            const { error } = await this.supabase.rpc('exec_sql', { sql });
            if (error) throw error;

            this.stats.qci_analyses.created += qciBatch.length;
            console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ ${qciBatch.length} QCI –∞–Ω–∞–ª–∏–∑–æ–≤`);

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ QCI –∞–Ω–∞–ª–∏–∑–æ–≤:`, error.message);
            this.stats.qci_analyses.errors += qciBatch.length;
        }
    }

    async run() {
        console.log('üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö VAPI –≤ Supabase\n');

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        const connected = await this.testConnection();
        if (!connected) return;

        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        await this.clearExistingData();

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const callsData = await this.loadJsonFile(CONFIG.INPUT_FILES.VAPI_CALLS);
        const qciData = await this.loadJsonFile(CONFIG.INPUT_FILES.QCI_ANALYSES);

        if (!callsData) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–æ–≤');
            return;
        }

        // –ú–∏–≥—Ä–∏—Ä—É–µ–º –∑–≤–æ–Ω–∫–∏
        await this.migrateCalls(callsData);

        // –ú–∏–≥—Ä–∏—Ä—É–µ–º QCI –∞–Ω–∞–ª–∏–∑—ã
        if (qciData) {
            await this.migrateQciAnalyses(qciData);
        }

        // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.printStats();
    }

    printStats() {
        console.log('\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

        Object.entries(this.stats).forEach(([table, stats]) => {
            const total = stats.created + stats.skipped + (stats.errors || 0);
            if (total > 0) {
                console.log(`üìä ${table}:`);
                console.log(`   –°–æ–∑–¥–∞–Ω–æ: ${stats.created}`);
                if (stats.skipped > 0) console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${stats.skipped}`);
                if (stats.errors > 0) console.log(`   –û—à–∏–±–∫–∏: ${stats.errors}`);
            }
        });

        console.log('\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
        console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ Supabase Dashboard');
        console.log('2. –û–±–Ω–æ–≤–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è:');
        console.log('   SELECT refresh_analytics_views();');
        console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã');
    }
}

// ============================================================
// –ó–ê–ü–£–°–ö –ú–ò–ì–†–ê–¶–ò–ò
// ============================================================

async function main() {
    const migrator = new SupabaseMigrator();
    await migrator.run();
}

if (require.main === module) {
    main();
}

module.exports = SupabaseMigrator;